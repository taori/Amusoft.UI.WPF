 <ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="clr-namespace:Amusoft.UI.WPF.Controls"
	xmlns:converters="clr-namespace:Amusoft.UI.WPF.Converters"
	xmlns:notifications="clr-namespace:Amusoft.UI.WPF.Notifications">

	<converters:AnchorPositionToHorizontalAlignmentConverter x:Key="AnchorPositionToHorizontalAlignmentConverter" />
	<converters:AnchorPositionToVerticalAlignmentConverter x:Key="AnchorPositionToVerticalAlignmentConverter" />
	<converters:SimpleNotificationToIconConverter x:Key="SimpleNotificationToIconConverter" />
	<converters:SimpleNotificationToColorConverter x:Key="SimpleNotificationToColorConverter" />
	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />


	<Style TargetType="{x:Type local:NotificationDisplayItem}" x:Key="DefaultNotificationDisplayItem">
		<Setter Property="NotificationIconTemplate">
			<Setter.Value>
				<DataTemplate>
					<local:TintedImage
						Source="{Binding Path=., Converter={StaticResource SimpleNotificationToIconConverter}}"
						Brush="{Binding Path=., Converter={StaticResource SimpleNotificationToColorConverter}}"
						Height="36"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="CloseTemplate">
			<Setter.Value>
				<DataTemplate>
					<local:TintedImage Source="/Amusoft.UI.WPF;component/Resources/close.png" Height="24" Brush="DarkGray">
						<local:TintedImage.Style>
							<Style TargetType="{x:Type local:TintedImage}">
								<Style.Triggers>
									<EventTrigger RoutedEvent="MouseEnter">
										<EventTrigger.Actions>
											<BeginStoryboard>
												<Storyboard >
													<ColorAnimation
														To="White"
														Duration="0:0:0.2"
														Storyboard.TargetProperty="(local:TintedImage.Brush).(SolidColorBrush.Color)"/>
												</Storyboard>
											</BeginStoryboard>
										</EventTrigger.Actions>
									</EventTrigger>
									<EventTrigger RoutedEvent="MouseLeave">
										<EventTrigger.Actions>
											<BeginStoryboard>
												<Storyboard >
													<ColorAnimation
														To="DarkGray"
														Duration="0:0:0.2"
														Storyboard.TargetProperty="(local:TintedImage.Brush).(SolidColorBrush.Color)"/>
												</Storyboard>
											</BeginStoryboard>
										</EventTrigger.Actions>
									</EventTrigger>
								</Style.Triggers>
							</Style>
						</local:TintedImage.Style>
					</local:TintedImage>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Border Background="#333"
					        x:Name="PART_SelectControl"
					        Cursor="Hand"
					        MinWidth="400"
					        RenderTransformOrigin="0.5,0.5"
					        Opacity="1"
					        Padding="0,5">
						<Border.RenderTransform>
							<TransformGroup>
								<ScaleTransform ScaleY="1" ScaleX="1" />
								<TranslateTransform X="0" Y="0" />
							</TransformGroup>
						</Border.RenderTransform>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition To="Pressed" GeneratedDuration="0:0:0.1" />
									<VisualTransition To="Normal" GeneratedDuration="0:0:0.1" />
									<VisualTransition To="MouseOver" GeneratedDuration="0:0:0.1" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation To="0.99" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" />
										<ColorAnimation To="#555" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimation To="#555" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup Name="TerminalStates">
								<VisualStateGroup.Transitions>
									<VisualTransition To="Closing" GeneratedDuration="0:0:0.3" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Closing">
									<Storyboard>
										<DoubleAnimation To="400" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(TranslateTransform.X)" />
										<DoubleAnimation To="0.8" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" />
										<DoubleAnimation To="0.8" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" />
										<DoubleAnimation To="0" Storyboard.TargetProperty="(UIElement.Opacity)" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<DockPanel>
							<ContentPresenter x:Name="PART_Icon"
							                  Margin="10,0,0,0"
							                  Content="{TemplateBinding DataContext}" 
							                  ContentTemplate="{Binding Path=NotificationIconTemplate, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NotificationDisplayItem}}}" 
							                  DockPanel.Dock="Left" />
							<Border DockPanel.Dock="Right"
							        Padding="10,0"
							        x:Name="PART_Close" 
							        Visibility="{Binding Converter={StaticResource BooleanToVisibilityConverter}, Path=IsCloseButtonVisible, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NotificationDisplayItem}}}">
								<ContentPresenter 
									Content="{TemplateBinding DataContext}" 
									ContentTemplate="{Binding Path=CloseTemplate, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NotificationDisplayItem}}}" 
								/>
							</Border>
							<ContentPresenter x:Name="PART_Content" Content="{TemplateBinding DataContext}" Margin="10,0"/>
						</DockPanel>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type local:NotificationDisplayItem}" BasedOn="{StaticResource DefaultNotificationDisplayItem}"/>

	<Style TargetType="{x:Type local:NotificationDisplay}" x:Key="DefaultNotificationDisplay">
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type local:NotificationDisplayItem}"></Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="#333333" />
		<Setter Property="Padding" Value="0,10" />
		<Setter Property="MinWidth" Value="200" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:NotificationDisplay}">
					<Border Background="{TemplateBinding Background}"
					        HorizontalAlignment="{Binding Path=AnchorPosition, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource AnchorPositionToHorizontalAlignmentConverter}}"
					        VerticalAlignment="{Binding Path=AnchorPosition, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource AnchorPositionToVerticalAlignmentConverter}}"
					        BorderBrush="{TemplateBinding BorderBrush}"
					        BorderThickness="{TemplateBinding BorderThickness}">
						<ItemsControl
							ItemContainerStyle="{TemplateBinding ItemContainerStyle}"
							AlternationCount="{TemplateBinding AlternationCount}"
							DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
							GroupStyleSelector="{TemplateBinding GroupStyleSelector}"
							IsTextSearchCaseSensitive="{TemplateBinding IsTextSearchCaseSensitive}"
							IsTextSearchEnabled="{TemplateBinding IsTextSearchEnabled}"
							ItemsPanel="{TemplateBinding ItemsPanel}"
							MinWidth="{TemplateBinding MinWidth}"
							MinHeight="{TemplateBinding MinHeight}"
							MaxHeight="{TemplateBinding MaxHeight}"
							MaxWidth="{TemplateBinding MaxWidth}"
							Style="{TemplateBinding Style}"
							Padding="{TemplateBinding Padding}"
							Margin="{TemplateBinding Margin}"
							LayoutTransform="{TemplateBinding LayoutTransform}"
							RenderTransform="{TemplateBinding RenderTransform}"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							ItemsSource="{TemplateBinding ItemsSource}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type local:NotificationDisplay}" BasedOn="{StaticResource DefaultNotificationDisplay}"/>

	<DataTemplate DataType="{x:Type notifications:SimpleNotification}">
		<TextBlock Text="{Binding Path=Text}" VerticalAlignment="Center" Foreground="White" />
	</DataTemplate>

	<Style TargetType="{x:Type local:TintedImage}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Border 
						BorderThickness="{TemplateBinding BorderThickness}"
						BorderBrush="{TemplateBinding BorderBrush}"
						Background="{TemplateBinding Background}" 
						Padding="{TemplateBinding Padding}">
						<Grid>
							<Image
								Source="{Binding Path=Source, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:TintedImage}}}"
								Width="{TemplateBinding Width}"
								Height="{TemplateBinding Height}" />
							<Rectangle 
								Fill="{Binding Path=Brush, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:TintedImage}}}"
								Width="{TemplateBinding Width}" 
								Height="{TemplateBinding Height}">
								<Rectangle.OpacityMask>
									<ImageBrush ImageSource="{Binding Path=Source, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:TintedImage}}}"/>
								</Rectangle.OpacityMask>
							</Rectangle>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>